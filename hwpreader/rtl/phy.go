// Copyright (C) 2025 - Damien Dejean <dam.dejean@gmail.com>

package rtl

import "fmt"

type PhyChipId uint32

const (
	RTK_PHYTYPE_NONE PhyChipId = iota
	RTK_PHYTYPE_RTL8208D
	RTK_PHYTYPE_RTL8208G
	RTK_PHYTYPE_RTL8208L
	RTK_PHYTYPE_RTL8208L_INT
	RTK_PHYTYPE_RTL8212B
	RTK_PHYTYPE_RTL8214FB
	RTK_PHYTYPE_RTL8214B
	RTK_PHYTYPE_RTL8214FC
	RTK_PHYTYPE_RTL8214C
	RTK_PHYTYPE_RTL8218B
	RTK_PHYTYPE_RTL8218FB
	RTK_PHYTYPE_RTL8218D
	RTK_PHYTYPE_RTL8295R
	RTK_PHYTYPE_RTL8214QF
	RTK_PHYTYPE_RTL8224QF
	RTK_PHYTYPE_RTL8218D_NMP
	RTK_PHYTYPE_RTL8295R_C22
	RTK_PHYTYPE_RTL8214QF_NC5
	RTK_PHYTYPE_RTL8226
	RTK_PHYTYPE_RTL8226B
	RTK_PHYTYPE_RTL8218E
	RTK_PHYTYPE_RTL8261
	RTK_PHYTYPE_RTL8264
	RTK_PHYTYPE_RTL8261I
	RTK_PHYTYPE_RTL8264I
	RTK_PHYTYPE_RTL8251
	RTK_PHYTYPE_RTL8254
	RTK_PHYTYPE_RTL8251I
	RTK_PHYTYPE_RTL8254I
	RTK_PHYTYPE_RTL8251L
	RTK_PHYTYPE_RTL8254L
	RTK_PHYTYPE_RTL8224
	RTK_PHYTYPE_RTL8261B
	RTK_PHYTYPE_RTL8264B
	RTK_PHYTYPE_SERDES
	RTK_PHYTYPE_CUST1
	RTK_PHYTYPE_CUST2
	RTK_PHYTYPE_CUST3
	RTK_PHYTYPE_CUST4
	RTK_PHYTYPE_CUST5
	RTK_PHYTYPE_EXP_RTL8211FS
	RTK_PHYTYPE_UNKNOWN
	RTK_PHYTYPE_INVALID
	RTK_PHYTYPE_END
)

func (pci PhyChipId) String() string {
	switch pci {
	case RTK_PHYTYPE_NONE:
		return "RTK_PHYTYPE_NONE"
	case RTK_PHYTYPE_RTL8208D:
		return "RTK_PHYTYPE_RTL8208D"
	case RTK_PHYTYPE_RTL8208G:
		return "RTK_PHYTYPE_RTL8208G"
	case RTK_PHYTYPE_RTL8208L:
		return "RTK_PHYTYPE_RTL8208L"
	case RTK_PHYTYPE_RTL8208L_INT:
		return "RTK_PHYTYPE_RTL8208L_INT"
	case RTK_PHYTYPE_RTL8212B:
		return "RTK_PHYTYPE_RTL8212B"
	case RTK_PHYTYPE_RTL8214FB:
		return "RTK_PHYTYPE_RTL8214FB"
	case RTK_PHYTYPE_RTL8214B:
		return "RTK_PHYTYPE_RTL8214B"
	case RTK_PHYTYPE_RTL8214FC:
		return "RTK_PHYTYPE_RTL8214FC"
	case RTK_PHYTYPE_RTL8214C:
		return "RTK_PHYTYPE_RTL8214C"
	case RTK_PHYTYPE_RTL8218B:
		return "RTK_PHYTYPE_RTL8218B"
	case RTK_PHYTYPE_RTL8218FB:
		return "RTK_PHYTYPE_RTL8218FB"
	case RTK_PHYTYPE_RTL8218D:
		return "RTK_PHYTYPE_RTL8218D"
	case RTK_PHYTYPE_RTL8295R:
		return "RTK_PHYTYPE_RTL8295R"
	case RTK_PHYTYPE_RTL8214QF:
		return "RTK_PHYTYPE_RTL8214QF"
	case RTK_PHYTYPE_RTL8224QF:
		return "RTK_PHYTYPE_RTL8224QF"
	case RTK_PHYTYPE_RTL8218D_NMP:
		return "RTK_PHYTYPE_RTL8218D_NMP"
	case RTK_PHYTYPE_RTL8295R_C22:
		return "RTK_PHYTYPE_RTL8295R_C22"
	case RTK_PHYTYPE_RTL8214QF_NC5:
		return "RTK_PHYTYPE_RTL8214QF_NC5"
	case RTK_PHYTYPE_RTL8226:
		return "RTK_PHYTYPE_RTL8226"
	case RTK_PHYTYPE_RTL8226B:
		return "RTK_PHYTYPE_RTL8226B"
	case RTK_PHYTYPE_RTL8218E:
		return "RTK_PHYTYPE_RTL8218E"
	case RTK_PHYTYPE_RTL8261:
		return "RTK_PHYTYPE_RTL8261"
	case RTK_PHYTYPE_RTL8264:
		return "RTK_PHYTYPE_RTL8264"
	case RTK_PHYTYPE_RTL8261I:
		return "RTK_PHYTYPE_RTL8261I"
	case RTK_PHYTYPE_RTL8264I:
		return "RTK_PHYTYPE_RTL8264I"
	case RTK_PHYTYPE_RTL8251:
		return "RTK_PHYTYPE_RTL8251"
	case RTK_PHYTYPE_RTL8254:
		return "RTK_PHYTYPE_RTL8254"
	case RTK_PHYTYPE_RTL8251I:
		return "RTK_PHYTYPE_RTL8251I"
	case RTK_PHYTYPE_RTL8254I:
		return "RTK_PHYTYPE_RTL8254I"
	case RTK_PHYTYPE_RTL8251L:
		return "RTK_PHYTYPE_RTL8251L"
	case RTK_PHYTYPE_RTL8254L:
		return "RTK_PHYTYPE_RTL8254L"
	case RTK_PHYTYPE_RTL8224:
		return "RTK_PHYTYPE_RTL8224"
	case RTK_PHYTYPE_RTL8261B:
		return "RTK_PHYTYPE_RTL8261B"
	case RTK_PHYTYPE_RTL8264B:
		return "RTK_PHYTYPE_RTL8264B"
	case RTK_PHYTYPE_SERDES:
		return "RTK_PHYTYPE_SERDES"
	case RTK_PHYTYPE_CUST1:
		return "RTK_PHYTYPE_CUST1"
	case RTK_PHYTYPE_CUST2:
		return "RTK_PHYTYPE_CUST2"
	case RTK_PHYTYPE_CUST3:
		return "RTK_PHYTYPE_CUST3"
	case RTK_PHYTYPE_CUST4:
		return "RTK_PHYTYPE_CUST4"
	case RTK_PHYTYPE_CUST5:
		return "RTK_PHYTYPE_CUST5"
	case RTK_PHYTYPE_EXP_RTL8211FS:
		return "RTK_PHYTYPE_EXP_RTL8211FS"
	default:
		return fmt.Sprintf("RTK_PHYTYPE_UNKNOWN (%d)", pci)
	}
}

type Phy struct {
	Chip   PhyChipId
	PhyMax uint8
	MacId  uint8
	Pad0   uint8
	Pad1   uint8
}

func (p *Phy) String() string {
	return fmt.Sprintf("Phy{chip: %s, mac_id: %2d, phy_max: %2d}", p.Chip, p.MacId, p.PhyMax)
}
